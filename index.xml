<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>LexterSecurity</title>
        <link>http://example.org/</link>
        <description>Fun research blog </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 04 Sep 2023 04:38:26 &#43;0200</lastBuildDate>
            <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>KnightCTF SwitchBank</title>
    <link>http://example.org/posts/knightctf-switchbank/</link>
    <pubDate>Mon, 04 Sep 2023 04:38:26 &#43;0200</pubDate>
    <author>Lxt3h</author>
    <guid>http://example.org/posts/knightctf-switchbank/</guid>
    <description><![CDATA[KnightCTF - Knight Switch bank Nom Knight Switch Bank Points 200 Difficulté Facile Validation 173 Bonjour, je vous présente aujourd’hui ma writeup sur le challenge de Reverse Knight Switch bank du CTF KnightCTF.
Commençons par le commencement, tout d’abord lançons le binaire.
Analyse et compréhensions du binaire Lorsque nous lançons le binaire on peut voir qu’il demande un mot de passe. On peut potentiellement en conclure que le mot de passe est en dur dans le code du binaire, mais qu’il y a un algorithme à reverse.]]></description>
</item>
<item>
    <title>Config Loader HackSecuReims</title>
    <link>http://example.org/posts/config-loader-hacksecureims/</link>
    <pubDate>Mon, 04 Sep 2023 04:35:12 &#43;0200</pubDate>
    <author>Lxt3h</author>
    <guid>http://example.org/posts/config-loader-hacksecureims/</guid>
    <description><![CDATA[Config Loader - HackSecuReims int __cdecl main(int argc, const char **argv, const char **envp) { int v4; // [rsp+10h] [rbp-10h] BYREF unsigned __int64 v6; // [rsp+18h] [rbp-8h] v6 = __readfsqword(0x28u); v4 = 0; ignore_me_init_buffering(argc, argv, envp); print_banner(); puts(&#34;Access restricted - You must log in first&#34;); sleep(1u); if ( !(unsigned int)login() ) { puts(&#34;Unauthorized access detected - Exiting&#34;); exit(1); } while ( v4 != 6 ) { print_menu(); printf(&#34;&gt;&gt;&gt;&#34;); __isoc99_scanf(&#34; %d&#34;, &amp;v4); fflush(stdin); if ( v4 &lt;= 0 || v4 &gt; 5 ) { puts(&#34;Unknown action, exiting .]]></description>
</item>
<item>
    <title>FCSC 2023 Tweedle Dee Web</title>
    <link>http://example.org/posts/fcsc-2023-tweedle-dee-web/</link>
    <pubDate>Mon, 04 Sep 2023 04:31:31 &#43;0200</pubDate>
    <author>Lxt3h</author>
    <guid>http://example.org/posts/fcsc-2023-tweedle-dee-web/</guid>
    <description><![CDATA[Tweedle-Dee Analyse du code @app.route(&#34;/&#34;) def hello_agent(secret=None): ua = request.user_agent return render_template(&#34;index.html&#34;, msg=f&#34;Hello {ua}&#34;.format(ua=ua)) worker_processes 4; events { use epoll; worker_connections 128; } http { charset utf-8; access_log /dev/stdout combined; error_log /dev/stdout debug; real_ip_header X-Forwarded-For; real_ip_recursive on; set_real_ip_from 0.0.0.0/0; server { listen 2201; server_name _; location /console { return 403 &#34;Bye&#34;; } location @error { return 500 &#34;Bye&#34;; } location / { error_page 500 503 @error; proxy_intercept_errors on; proxy_pass http://app:5000; } } } Ayant fait le challenge Tweedle Dum je comprend rapidement que le code de la route n&rsquo;a pas changé et je n&rsquo;ai accès qu&rsquo;a une format string.]]></description>
</item>
<item>
    <title>FCSC 2023 Peculiar Caterpillar Web</title>
    <link>http://example.org/posts/fcsc-2023-peculiar-caterpillar-web/</link>
    <pubDate>Mon, 04 Sep 2023 04:26:39 &#43;0200</pubDate>
    <author>Lxt3h</author>
    <guid>http://example.org/posts/fcsc-2023-peculiar-caterpillar-web/</guid>
    <description><![CDATA[Peculiar Caterpillar Analyse du code Nous allons commencer par une première analyse du code fournit par l&rsquo;auteur du challenge.
index.js
require(&#34;express&#34;)().set(&#34;view engine&#34;, &#34;ejs&#34;).use((req, res) =&gt; res.render(&#34;index&#34;, { name: &#34;World&#34;, ...req.query })).listen(3000); Globalement ce script ne fait qu&rsquo;importer express, configure le moteur de template ejs et renvoie une vue sur le fichier index.ejs tout envoyant un objet contenant ...req.query avec une variable name qui sera interprété au rendu par EJS pour l&rsquo;afficher sur la template index.]]></description>
</item>
<item>
    <title>Writeup HTB Business CTF License Generator</title>
    <link>http://example.org/posts/writeup-htb-business-ctf-license-generator/</link>
    <pubDate>Mon, 04 Sep 2023 03:54:04 &#43;0200</pubDate>
    <author>Lxt3h</author>
    <guid>http://example.org/posts/writeup-htb-business-ctf-license-generator/</guid>
    <description><![CDATA[Free license generator by Lxt3h and mhoste
Nom Free License Generator Points 1000 Difficulté Insane Validation 18 This was the hardest reverse engineering challenge from HTB Buisness CTF. This chall helped us to improve our skills in WinAPI and Miasm.
The challenge provides us a PCAP and a x86 PE binary being a malware. The PCAP is the a record of the communication between the victim and the C2.
PCAP analysis This is what it looks like :]]></description>
</item>
<item>
    <title>Hello</title>
    <link>http://example.org/posts/hello/</link>
    <pubDate>Mon, 04 Sep 2023 03:12:28 &#43;0200</pubDate>
    <author>lx3th</author>
    <guid>http://example.org/posts/hello/</guid>
    <description><![CDATA[ func main() { fmt.Println(&#34;Hello, world&#34;) } ]]></description>
</item>
</channel>
</rss>
